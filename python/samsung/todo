implement exception handling, return value checking, and determining if the files found exist or are Nonetype

implement signal handling to more graciously terminate rather than sigkill or eof and then switch to application for it to receive it
	or is this program backgrounded by itself

implement notifications as syscall? && find out if i can package the notify icons from the scripts into this project

determine method of notifying user of requisites for functioning perfectly or bypassing those if possible ( notifications, tkinter )

place in GUI a label or some sort that shows current settings of each hardware device

continuously update hardware label so that outside modification is reflected in the program, also might be useful in debugging for more hardware additions

change background colors if button's device variable is Nonetype

check a config file in user home somewhere, instead of constantly walking the OS path - assuming the filepaths do not change (some of mine do)

system calls can be made to run appropriate programs instead of writing to files (rfkill for radios, setpci/xbacklight/randrs for monitor backlight, etc) - programs should be installed if made through syscall

cli interface for enabling, disabling, and setting devices

dynamically/statically generate a GUI for hardware found? for hardware that is controllable? instead of defining widgets constantly, maybe check a/the config file for hardware to control

when wifi is written 0, htop still shows the interface being powered. rfkill takes care of the write 0/1 for power, and disabling the interface properly. should change wifi to make system call instead of direct writing for now, alternative rfkill subdirs also contain states of 0 but do not allow writing to them, garden pathing
